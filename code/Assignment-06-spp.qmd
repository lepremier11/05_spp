---
title: "Assignment 6 - Split-plot randomization"
author: "Charles Appolon"  
format:
  html:
    code-fold: true 
    embed-resources: true
    toc: true
    number-sections: true
    theme: cerulean
---

# Introduction  
This assignment will ask you to conduct a split-plot RCBD randomization. 

For that, you will first need to watch (and code along with) the following split-plot randomization video:

- split-plot randomization: https://youtu.be/rXTp3Vw_770?si=MajBK1aZ221orfpa&t=3401 (starts at 00:56:41, watch till end, about 50-min total)

- The partial script for the video above is in our GitHub repository, 04-classcode, **02-13_spp_randomization_partial.qmd**.


**AFTER watching the video and developing the code in class**, then start working on this HW assignment.  

The different sections representing what we did in class were left in the script to provide you a scaffold to start from.  

# Instructions  
  - Move this script into the `code` subfolder of your `05_spp` project folder  
  - On this script, fill your name under the `title` section of the YAML  
  
# Goal of this assignment  
The goal is this assignment is for you to **design a split-plot RCBD design applicable to your area of study**.  

This could be from your own experience, an example from the literature, or something you come up entirely on your own (as long as it makes sense).  

In the headings below, you will answer a couple of questions related to study objectives and treatment design, and then move on to randomize your study, create a plot layout, and export the designed table to file.  

# Setup  
Here is where we load the packages we will use.  
Make sure to load each package in the chunk below.  
```{r setup, warning=FALSE, message=FALSE}
# Loading packages
library(tidyverse) # for data wrangling and plotting
library(ggplot2) # for graph generation
library(readr) # helps with exporting
library(dplyr) # wrangling
```



# Treatment design  
## Objectives  
Write here what are the objectives of the study you are designing. Remember that objectives are closely connected with your treatment design, so whatever you say are your objectives should carry through on your choice of treatment factors and levels.  
The study aims to evaluate the influence of air temperature (cold, ambient, hot) and food contact surfaces on Listeria attachment after a 96h storage period. 
## Treatment design explanation  
Here is where you explain your treatment design, including the name of the treatment factors, their levels (don't forget to include units), and which is the whole-plot treatment factor and which one is the split-plot treatment factor.
We are running a 2-way factorial **in a split plot design**
- **Temperature** (Whole-plot factor)
  3 levels: 4°C, 25°C, 37°C
- **Food Contact Surfaces** (subplot factor)
  5 levels: High-Density Polyethylene (HDPE), Polytetrafluoroethylene (PTFE), Nylon (NY), Stainless Steel (SS), Polyvinyl Chloride (PVC)
- **Observational Units**
  Coupon
- **Dependent Variable** (Response)
  Listeria populations(CFU)
- 3 x 5 = **15 treatment combinations**. We assume the difference between chambers are marginal.
Given the fact that we only have 3 environmental chambers, each capable of accomodating 1 set temperature and 5 materials at max per trial, we decided to run a split plot design in RCBD, where the effect of trial is accounted as blocks, and the main effect of temperature is confounded. This design allows to accommodate logistical constraints while addressing experimental error associated with the temperature and the type of materials. The term "trial" refers to the biological replication often encountered in food microbiology paper. As we expect to run each trial independently, we decided to block the effect of trial in this case. 

## Code  
Here develop the code to setup your design (like in class).   
Let's define our treatments above in an object.  
```{r}
trts <- crossing(temp_c = c(4, 25, 37),
                 mat = c("HDPE", "PTFE", "NY", "SS", "PVC")
                 ) %>%
  mutate(trtnum = 1:nrow(.)) %>%
  mutate(temp = paste0(temp_c)) %>%
  mutate(trtname1 = paste0(mat))
trts
```

# Split-plot in RCBD  
## WP randomization  
```{r wp_rcbd_rand}
# Setting seed to get same randomization result every time
set.seed(930)

wp_rcbd_rand <- crossing(temp_c = trts$temp_c,
                     rep = 1:4
                     ) %>%
  arrange(rep) %>%
  group_by(rep)%>%
  # Randomizing WP treatment factor to blocks (restricted) 
  mutate(temp_c = sample(temp_c)) %>%
    # Creating WP plot numbers 
 mutate(wplot = (rep*100)+ 1:3) %>%
  ungroup()
wp_rcbd_rand
```

## SP randomization  
```{r sp_rcbd_rand}
sp_rcbd_rand <- crossing(
  material = trts$mat,    # Rename the column as 'nrate_kgha'
  wplot = wp_rcbd_rand$wplot       # Use the whole plot identifiers from wp_rcbd_rand
) %>%  
  arrange(wplot) %>%    
 # Randomizing SP treatment factor to WP plots (restricted)
   group_by(wplot) %>%
  mutate(material = sample(material)) %>%
  # Creating SP plot numbers 
  mutate(splot = paste0(wplot,"-",1:5)) %>%
  ungroup()
sp_rcbd_rand
```

## Joining WP and SP into one object
```{r spp_rcbd_rand, message=FALSE, warning=FALSE}
spp_rcbd_rand <- wp_rcbd_rand %>%
  right_join(sp_rcbd_rand) %>%
 mutate(realname = paste0(temp_c, "+", material))

spp_rcbd_rand
```

## Plot layout  
```{r spp_rcbd_layout}
spp_rcbd_layout <- spp_rcbd_rand %>%
  # Defining number of rows and columns for each trial
  mutate(row = rep(1:4, each = 15)) %>%
  mutate(col = rep(seq(from = 1, 
                       to = 15, #total number of treatments, 
                       by = 1), 
                   times = 4 #total number of blocks or trials
  )) %>%
  # Creating plot and trtname labels for plotting
  mutate(lab = paste0(splot, "\n", realname ))

spp_rcbd_layout
```
Let's have a visual representation of the plot layout for an easier apprehension
```{r spp rcbd mapping, message=FALSE, warning=FALSE, fig.width=10, fig.height=7.5}
ggplot(spp_rcbd_layout, aes(x = row, 
                                   y = -col)) +
   geom_tile(aes(fill = factor(material)),
            color = "black",
            show.legend = F) +
  geom_tile(aes(color = factor(temp_c)),
            show.legend = F,
            size = 2,
            linetype = 2,
            fill = NA) +
  # Color for our splitplot
    scale_fill_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
  # Color for our dashed line whole plot - note that we used scale_color instead of scale_fill with a different color pattern
  scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
  # This will add the different identifiers. in addition, we used vjust for a smaller police size for the treatment combinations
  geom_text(aes(label = splot), fontface = "bold", vjust = -.5,
            size = 4)+
  geom_text(aes(label = realname), vjust = 1, size = 3)+
  labs(title = "Split-plot RCBD randomization",
       subtitle = "Design for testing 3 Temperatures (whole-plot) and 5 Material Types (split-plot) on Listeria Attachment") +
  theme_void() +
  # We used plot title and plot.subtitle for better visualization
  theme(
    plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 10))
  )
```

# Exporting to file  
```{r}
spp_rcbd_rand %>%
  # Rearranging columns  
  dplyr::select(rep, wplot, temp_c, 
                splot, material,
                realname) %>%
  write_csv("../output/spp_rcbd_randomization_table.csv")
# Saving the plot map 
ggsave("../output/spp_rcbd_layoutmap.png",
       width = 10,
       height = 7.5,
       bg = "white")
```

# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.  

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE` (I'll demo this in a moment).  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one (I'lld demo this in a moment).  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `Assignment-06-spp-LASTNAME.html`.    

For ex., mine would be `Assignment-06-spp-Bastos.html`.

Submit your work by uploading the **html** file to **eLC Assigment #6 - Split-plot randomization** by Feb 20 11:59 pm.  
  




